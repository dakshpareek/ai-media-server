
# FileBrowser - File Management for AI Media Server
# Web interface available at: http://filebrowser:8081
# Provides web-based access to media files and downloads

services:
  filebrowser:
    container_name: ai_media_filebrowser
    image: filebrowser/filebrowser:${FILEBROWSER_VERSION:-latest}
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
    volumes:
      # Configuration and database
      - ${CONFIG_FILEBROWSER:-./config/filebrowser}:/config
      - ${CONFIG_FILEBROWSER:-./config/filebrowser}/database.db:/database.db
      - ${CONFIG_FILEBROWSER:-./config/filebrowser}/settings.json:/config/settings.json
      
      # Media files access (read-only for safety)
      - ${MEDIA_PATH:-./media}:/srv/media:ro
      
      # Downloads access (read/write for management)
      - ${DOWNLOADS_PATH:-./downloads}:/srv/downloads
      
      # Configuration files access (read-only)
      - ${CONFIG_PATH:-./config}:/srv/config:ro
      
      # Logs access (read-only)
      - ${LOGS_PATH:-./logs}:/srv/logs:ro
    ports:
      # Expose only for initial setup, remove in production
      - "${PORT_FILEBROWSER:-8081}:80"
    networks:
      - media_network
    restart: unless-stopped
    command:
      - --noauth
      - --database=/database.db
      - --root=/srv
      - --port=80
      - --log=stdout
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      # Labels for service discovery and management
      - "ai-media-server.service=filebrowser"
      - "ai-media-server.role=file-manager"
      - "ai-media-server.api=http://filebrowser:80/api"

networks:
  media_network:
    name: ${NETWORK_NAME:-media_network}
    external: true 